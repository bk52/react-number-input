{"version":3,"file":"NumberInput.stories-1d6f9fae.js","sources":["../../node_modules/react/cjs/react-jsx-runtime.production.min.js","../../node_modules/react/jsx-runtime.js","../../src/components/NumberInput.tsx"],"sourcesContent":["/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var f=require(\"react\"),k=Symbol.for(\"react.element\"),l=Symbol.for(\"react.fragment\"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=\"\"+g);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l;exports.jsx=q;exports.jsxs=q;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n","import React, { useState, useEffect, useRef } from \"react\"\r\n\r\ninterface INumberInput {\r\n  /**\r\n   * Initial value for input. Default=0\r\n   */\r\n  defaultValue?: number\r\n  /**\r\n   * Allow decimal input. Default=false\r\n   */\r\n  allowDecimal?: boolean\r\n  /**\r\n   * Decimal digit count for input. Default=1\r\n   */\r\n  decimalDigit?: number\r\n  /**\r\n   * Maximum limit for input.\r\n   */\r\n  max?: number\r\n  /**\r\n   * Minimum limit for input.\r\n   */\r\n  min?: number\r\n  /**\r\n   * CSS properties for input.\r\n   */\r\n  inputStyle?: React.CSSProperties\r\n  /**\r\n   * Locale settings for different countries. Default=\"en-US\"\r\n   */\r\n  locales?: string | string[] | undefined\r\n  /**\r\n   * Trigger when input value changed and return current value.\r\n   */\r\n  onChange?: (value: number) => void\r\n}\r\n\r\nconst rgxOnlyZeros = /^(?:-)?0+(\\.0+)?$/\r\n\r\nconst rangeControl = (\r\n  prevValue: number,\r\n  newValue: number,\r\n  min?: number,\r\n  max?: number\r\n): number => {\r\n  let result = newValue\r\n  if (typeof min === \"number\" && newValue < min) result = prevValue\r\n  if (typeof max === \"number\" && newValue > max) result = prevValue\r\n  return result\r\n}\r\n\r\nconst onKeyPress = (prevVal: string, key: string): string => {\r\n  let result = prevVal\r\n  if (key === \"Backspace\") {\r\n    result = prevVal.slice(0, -1)\r\n  } else if (!isNaN(Number(key))) {\r\n    result = `${prevVal}${key}`\r\n  }\r\n  return result\r\n}\r\n\r\nconst onInputChange = (\r\n  prevVal: string,\r\n  key: string,\r\n  allowDecimal?: boolean,\r\n  decimalDigit?: number\r\n): string => {\r\n  let newVal = prevVal\r\n\r\n  if (allowDecimal) {\r\n    const isNegative = prevVal.includes(\"-\")\r\n    const pureInput = prevVal.replace(/[,.-]/g, \"\").replace(/^0+/, \"\")\r\n    const digitCount = decimalDigit || 1\r\n    const zerosCountToAdd = digitCount + 1\r\n    newVal = onKeyPress(pureInput, key)\r\n    if (newVal.length < zerosCountToAdd)\r\n      newVal = newVal.padStart(zerosCountToAdd, \"0\")\r\n    newVal = newVal.slice(0, -digitCount) + \".\" + newVal.slice(-digitCount)\r\n    if (isNegative) newVal = `-${newVal}`\r\n    if (rgxOnlyZeros.test(newVal)) newVal = newVal.replace(\"-\", \"\")\r\n  } else {\r\n    newVal = onKeyPress(prevVal, key)\r\n    if (newVal === \"\" || newVal === \"-\") newVal = \"0\"\r\n  }\r\n\r\n  return newVal\r\n}\r\n\r\nconst formatValue = (\r\n  val: string,\r\n  allowDecimal?: boolean,\r\n  decimalDigit?: number,\r\n  locales?: string | string[] | undefined\r\n): string => {\r\n  if (!allowDecimal) return val\r\n\r\n  return new Intl.NumberFormat(locales, {\r\n    style: \"decimal\",\r\n    maximumFractionDigits: decimalDigit || 1,\r\n    minimumFractionDigits: decimalDigit || 1,\r\n  }).format(parseFloat(val))\r\n}\r\n\r\nconst onSignChange = (val: string): string => {\r\n  let newVal = val\r\n  if (rgxOnlyZeros.test(val)) newVal = val.replace(\"-\", \"\")\r\n  else {\r\n    if (val.includes(\"-\")) newVal = val.replace(\"-\", \"\")\r\n    else newVal = `-${val}`\r\n  }\r\n  return newVal\r\n}\r\n\r\nconst initialFormat = (val: string, decimalDigit?: number): string => {\r\n  let newVal = val\r\n  if (val.includes(\".\")) {\r\n    const arr = val.split(\".\")\r\n    newVal = `${arr[0]}.${arr[1]\r\n      .slice(0, decimalDigit || 1)\r\n      .padEnd(decimalDigit || 1, \"0\")}`\r\n  } else if (val.includes(\",\")) {\r\n    const arr = val.split(\",\")\r\n    newVal = `${arr[0]},${arr[1]\r\n      .slice(0, decimalDigit || 1)\r\n      .padEnd(decimalDigit || 1, \"0\")}`\r\n  } else {\r\n    newVal = `${val}.${\"0\".repeat(decimalDigit || 1)}`\r\n  }\r\n  return newVal\r\n}\r\n\r\nconst NumberInput: React.FC<INumberInput> = ({\r\n  defaultValue,\r\n  allowDecimal,\r\n  decimalDigit,\r\n  max,\r\n  min,\r\n  inputStyle,\r\n  locales,\r\n  onChange,\r\n}) => {\r\n  const [val, setVal] = useState(defaultValue?.toString() || \"0\")\r\n  const inputRef = useRef<HTMLInputElement>(null)\r\n\r\n  const focusInput = () => {\r\n    if (!inputRef.current) return\r\n\r\n    inputRef.current.focus()\r\n    inputRef.current.setSelectionRange(\r\n      inputRef.current.value.length,\r\n      inputRef.current.value.length\r\n    )\r\n  }\r\n\r\n  useEffect(() => {\r\n    focusInput()\r\n    if (allowDecimal) {\r\n      setVal(initialFormat(val, decimalDigit))\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (allowDecimal) {\r\n      setVal(initialFormat(val, decimalDigit))\r\n    }\r\n  }, [allowDecimal, decimalDigit])\r\n\r\n  const onKeyPressed = (event: React.KeyboardEvent<HTMLInputElement>) => {\r\n    const { key } = event\r\n    const prevVal = val\r\n    let newVal = val\r\n\r\n    if (val.trim() === \"\") newVal = \"0\"\r\n\r\n    if (key === \" \") {\r\n      event.preventDefault()\r\n    } else if (key === \"-\") {\r\n      newVal = onSignChange(val)\r\n      newVal = rangeControl(\r\n        parseFloat(prevVal),\r\n        parseFloat(newVal),\r\n        min,\r\n        max\r\n      ).toString()\r\n    } else {\r\n      newVal = onInputChange(newVal, key, allowDecimal, decimalDigit)\r\n      newVal = rangeControl(\r\n        parseFloat(prevVal),\r\n        parseFloat(newVal),\r\n        min,\r\n        max\r\n      ).toString()\r\n    }\r\n    setVal(newVal)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (onChange)\r\n      allowDecimal ? onChange(parseFloat(val)) : onChange(parseInt(val))\r\n  }, [val])\r\n\r\n  return (\r\n    <input\r\n      ref={inputRef}\r\n      type=\"text\"\r\n      value={formatValue(val, allowDecimal, decimalDigit, locales)}\r\n      onChange={(e) => e.preventDefault()}\r\n      onKeyDown={onKeyPressed}\r\n      style={{ textAlign: \"right\", ...inputStyle }}\r\n    />\r\n  )\r\n}\r\n\r\nexport default NumberInput\r\n"],"names":["f","require$$0","k","l","m","n","p","q","c","a","g","b","d","e","h","reactJsxRuntime_production_min","jsxRuntimeModule","rgxOnlyZeros","rangeControl","prevValue","newValue","min","max","result","onKeyPress","prevVal","key","onInputChange","allowDecimal","decimalDigit","newVal","isNegative","pureInput","digitCount","zerosCountToAdd","formatValue","val","locales","onSignChange","initialFormat","arr","NumberInput","defaultValue","inputStyle","onChange","setVal","useState","inputRef","useRef","focusInput","useEffect","onKeyPressed","event","jsx"],"mappings":"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","x_google_ignoreList":[0,1]}